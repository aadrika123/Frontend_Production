{"version":3,"file":"static/js/9504.552dc10b.chunk.js","mappings":"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","sources":["Pages/Contents/CitizenSafForm/FormGenerator/FormGenerator.js","Pages/Contents/CitizenSafForm/FormGenerator/Form1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup'\r\n\r\nfunction FormGenerator(props) {\r\n  // CASE HANDLE \r\n  // 1 EDIT FEEDED DATA\r\n  // 2 SELECT LIST DATA\r\n\r\n  console.log('list....', props?.inputList)\r\n\r\n  function vso() {\r\n    let vs = {\r\n    }\r\n    props?.inputList?.map((data) => {\r\n      if (data?.required) {\r\n        vs = { ...vs, [data.id]: yup.string().required(data.validationMsg) }\r\n      }\r\n      if (data?.required == false) {\r\n        vs = { ...vs, [data.id]: yup.string() }\r\n      }\r\n    })\r\n    return vs\r\n  }\r\n\r\n  function ino() { // MAPPING THROUGH INPUT LIST TO PUSH DATA IN INTIALVALUE OBJECT\r\n    let inv = {\r\n    }\r\n    props?.inputList?.map((data) => {\r\n      inv = { ...inv, [data.id]: '' }\r\n    })\r\n    return inv\r\n  }\r\n  const validationSchema = yup.object(vso())\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: ino()\r\n    ,\r\n\r\n    onSubmit: (values, resetForm) => {\r\n      console.log('at submit form....', values)\r\n      alert('form submitted..')\r\n    }\r\n    , validationSchema\r\n  })\r\n\r\n  useEffect(() => {\r\n\r\n  }, [])\r\n\r\n  const handleChange = () => {\r\n\r\n  }\r\n\r\n  console.log('intial values...', ino())\r\n  console.log('validation schema...', vso())\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit} onChange={handleChange} className=\"bg-white w-1/3 mx-auto mt-10 p-10 shadow-xl rounded-lg\">\r\n        <div className=\"col-span-12 grid grid-cols-12 md:grid-cols-5\">\r\n          {\r\n            props?.inputList?.map((input) => (\r\n              <>\r\n\r\n                {input?.type != 'select' && <div className=\"form-group col-span-12  mb-6 md:px-4\">\r\n                  <label className=\"form-label inline-block mb-1 text-gray-600 text-sm font-semibold\"><small className=\"block mt-1 text-sm font-semibold text-red-600 inline \">*</small>{input?.name}</label>\r\n                  <input {...formik.getFieldProps(input.id)} type={input?.type} className=\"form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none placeholder-gray-300 shadow-md\"\r\n                    placeholder=\"Enter Khata No.\" />\r\n                  <span className=\"text-red-600 absolute text-xs\">{formik.touched[input?.id] && formik.errors[input?.id] ? formik.errors[input?.id] : null}</span>\r\n                </div>}\r\n                {input?.type == 'select' && <div className={`form-group col-span-12 md:col-span-12 mb-4 md:px-4`}>\r\n                  <label className={`form-label inline-block mb-1 text-gray-600 text-sm font-semibold`}><small className=\"block mt-1 text-sm font-semibold text-red-600 inline \">*</small>{input.name}</label>\r\n                  <select  {...formik.getFieldProps(input?.id)} className={`form-control block w-full px-3 py-2 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none shadow-md cursor-pointer `}>\r\n                    <option value=\"1\" >select ULB</option>\r\n                    <option value=\"1\" >Ward-1</option>\r\n                    {/* {\r\n                      props?.ulbList?.map((data) => (\r\n                        <option value={data.id}>{data.ulb_name}</option>\r\n                      ))\r\n                    } */}\r\n                  </select>\r\n                  <span className=\"text-red-600 absolute text-xs\">{formik.touched.id && formik.errors.id ? formik.errors.id : null}</span>\r\n                </div>\r\n                }\r\n              </>\r\n            ))\r\n          }\r\n\r\n          <div className=\"col-span-12\">\r\n            <button type=\"submit\" className=\"float-right px-6 py-2.5 bg-gray-400 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-gray-700 hover:shadow-lg focus:bg-gray-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-gray-800 active:shadow-lg transition duration-150 ease-in-out\">Save</button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FormGenerator;\r\n","import React from 'react'\r\nimport FormGenerator from './FormGenerator'\r\n\r\nfunction Form1() {\r\n\r\n    const inputList = [\r\n        { type: 'text', name: 'khata No', id: 'khataNo', dataList: null, required: true,validationMsg:'Enter k' },\r\n        { type: 'date', name: 'plot No', id: 'plotNo', dataList: null, required: true,validationMsg:'Enter date' },\r\n        { type: 'text', name: 'pincode', id: 'pincode', dataList: null, required: true,validationMsg:'Enter pin' },\r\n        { type: 'text', name: 'city', id: 'city', dataList: null, required: false,validationMsg:'Enter' },\r\n        { type: 'text', name: 'locality', id: 'locality', dataList: null, required: true,validationMsg:'Enter locality' },\r\n        { type: 'select', name: 'ward no', id: 'ward', dataList: null, required: true,validationMsg:'Enterr ward' },\r\n    ]\r\n    return (\r\n        <FormGenerator inputList={inputList} />\r\n    )\r\n}\r\n\r\nexport default Form1"],"names":["props","_props$inputList3","vso","_props$inputList","vs","inputList","map","data","required","_objectSpread","_defineProperty","id","yup","validationMsg","ino","_props$inputList2","inv","console","log","validationSchema","formik","useFormik","initialValues","onSubmit","values","resetForm","alert","useEffect","_jsx","_Fragment","children","handleSubmit","onChange","className","_jsxs","input","type","name","getFieldProps","placeholder","touched","errors","value","FormGenerator","dataList"],"sourceRoot":""}