{"version":3,"file":"static/js/9504.92e50b92.chunk.js","mappings":"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","sources":["Pages/Contents/CitizenSafForm/FormGenerator/FormGenerator.js","Pages/Contents/CitizenSafForm/FormGenerator/Form1.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup'\r\n\r\nfunction FormGenerator(props) {\r\n  // CASE HANDLE \r\n  // 1 EDIT FEEDED DATA\r\n  // 2 SELECT LIST DATA\r\n\r\n  console.log('list....', props?.inputList)\r\n\r\n  function vso() {\r\n    let vs = {\r\n    }\r\n    props?.inputList?.map((data) => {\r\n      if (data?.required) {\r\n        vs = { ...vs, [data.id]: yup.string().required(data.validationMsg) }\r\n      }\r\n      if (data?.required == false) {\r\n        vs = { ...vs, [data.id]: yup.string() }\r\n      }\r\n    })\r\n    return vs\r\n  }\r\n\r\n  function ino() { // MAPPING THROUGH INPUT LIST TO PUSH DATA IN INTIALVALUE OBJECT\r\n    let inv = {\r\n    }\r\n    props?.inputList?.map((data) => {\r\n      inv = { ...inv, [data.id]: '' }\r\n    })\r\n    return inv\r\n  }\r\n  const validationSchema = yup.object(vso())\r\n\r\n\r\n  const formik = useFormik({\r\n    initialValues: ino()\r\n    ,\r\n\r\n    onSubmit: (values, resetForm) => {\r\n      console.log('at submit form....', values)\r\n      alert('form submitted..')\r\n    }\r\n    , validationSchema\r\n  })\r\n\r\n  useEffect(() => {\r\n\r\n  }, [])\r\n\r\n  const handleChange = () => {\r\n\r\n  }\r\n\r\n  console.log('intial values...', ino())\r\n  console.log('validation schema...', vso())\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit} onChange={handleChange} className=\"bg-white w-1/3 mx-auto mt-10 p-10 shadow-xl rounded-lg\">\r\n        <div className=\"col-span-12 grid grid-cols-12 md:grid-cols-5\">\r\n          {\r\n            props?.inputList?.map((input) => (\r\n              <>\r\n\r\n                {input?.type != 'select' && <div className=\"form-group col-span-12  mb-6 md:px-4\">\r\n                  <label className=\"form-label inline-block mb-1 text-gray-600 text-sm font-semibold\"><small className=\"block mt-1 text-sm font-semibold text-red-600 inline \">*</small>{input?.name}</label>\r\n                  <input {...formik.getFieldProps(input.id)} type={input?.type} className=\"form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none placeholder-gray-300 shadow-md\"\r\n                    placeholder=\"Enter Khata No.\" />\r\n                  <span className=\"text-red-600 absolute text-xs\">{formik.touched[input?.id] && formik.errors[input?.id] ? formik.errors[input?.id] : null}</span>\r\n                </div>}\r\n                {input?.type == 'select' && <div className={`form-group col-span-12 md:col-span-12 mb-4 md:px-4`}>\r\n                  <label className={`form-label inline-block mb-1 text-gray-600 text-sm font-semibold`}><small className=\"block mt-1 text-sm font-semibold text-red-600 inline \">*</small>{input.name}</label>\r\n                  <select  {...formik.getFieldProps(input?.id)} className={`form-control block w-full px-3 py-2 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none shadow-md cursor-pointer `}>\r\n                    <option value=\"1\" >select ULB</option>\r\n                    <option value=\"1\" >Ward-1</option>\r\n                    {/* {\r\n                      props?.ulbList?.map((data) => (\r\n                        <option value={data.id}>{data.ulb_name}</option>\r\n                      ))\r\n                    } */}\r\n                  </select>\r\n                  <span className=\"text-red-600 absolute text-xs\">{formik.touched.id && formik.errors.id ? formik.errors.id : null}</span>\r\n                </div>\r\n                }\r\n              </>\r\n            ))\r\n          }\r\n\r\n          <div className=\"col-span-12\">\r\n            <button type=\"submit\" className=\"float-right px-6 py-2.5 bg-gray-400 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-gray-700 hover:shadow-lg focus:bg-gray-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-gray-800 active:shadow-lg transition duration-150 ease-in-out\">Save</button>\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FormGenerator;\r\n","import React from 'react'\r\nimport FormGenerator from './FormGenerator'\r\n\r\nfunction Form1() {\r\n\r\n    const inputList = [\r\n        { type: 'text', name: 'khata No', id: 'khataNo', dataList: null, required: true,validationMsg:'Enter k' },\r\n        { type: 'date', name: 'plot No', id: 'plotNo', dataList: null, required: true,validationMsg:'Enter date' },\r\n        { type: 'text', name: 'pincode', id: 'pincode', dataList: null, required: true,validationMsg:'Enter pin' },\r\n        { type: 'text', name: 'city', id: 'city', dataList: null, required: false,validationMsg:'Enter' },\r\n        { type: 'text', name: 'locality', id: 'locality', dataList: null, required: true,validationMsg:'Enter locality' },\r\n        { type: 'select', name: 'ward no', id: 'ward', dataList: null, required: true,validationMsg:'Enterr ward' },\r\n    ]\r\n    return (\r\n        <FormGenerator inputList={inputList} />\r\n    )\r\n}\r\n\r\nexport default Form1"],"names":["props","vso","vs","inputList","map","data","required","id","yup","validationMsg","ino","inv","console","log","validationSchema","formik","useFormik","initialValues","onSubmit","values","resetForm","alert","useEffect","handleSubmit","onChange","className","input","type","name","getFieldProps","placeholder","touched","errors","value","dataList"],"sourceRoot":""}