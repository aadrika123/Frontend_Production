{"version":3,"file":"static/js/7044.b02326c4.chunk.js","mappings":"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","sources":["Pages/AdvertisementModule/Advertisement/Agency/Hoarding/HoardingPaymentModal.jsx","Pages/AdvertisementModule/Advertisement/Agency/Hoarding/ViewAllHoardingUnpaidList.jsx","Pages/AdvertisementModule/GlobalFilterSearch.jsx","Pages/AdvertisementModule/ListTableAdvert.jsx"],"sourcesContent":["//////////////////////////////////////////////////////////////////////////////////////\r\n//    Author - swati sharma\r\n//    Version - 1.0\r\n//    Date - 11/04/23\r\n//    Revision - 1\r\n//    Project - JUIDCO\r\n//    Component  - HoardingPaymentModal\r\n//    DESCRIPTION - HoardingPaymentModal Component  \r\n//////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport RazorpayPaymentScreen from \"../../../../../Components/RazorpayPaymentScreen\";\r\nimport AdvertisementApiList from \"../../../AdvertisementApiList\";\r\nimport ApiHeaderAdvrt from \"../../../ApiHeaderAdvrt\";\r\n\r\n\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        right: \"auto\",\r\n        bottom: \"auto\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        background: \"\",\r\n        border: \"none\",\r\n    },\r\n};\r\n\r\nfunction HoardingPaymentModal(props) {\r\n    // Modal.setAppElement('#yourAppElement');\r\n    const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n    const { api_getHoardingOrderIdForPayment } = AdvertisementApiList()\r\n    const [orderId, setorderId] = useState()\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        if (props.openPaymentModal > 0) setIsOpen(true);\r\n    }, [props.openPaymentModal]);\r\n\r\n    console.log(\"payment card details\", props?.applicationDetails)\r\n\r\n    function afterOpenModal() { }\r\n\r\n    function closeModal() {\r\n        setIsOpen(false);\r\n        // props.refetchListOfRoles();\r\n    }\r\n\r\n    const notify = (toastData, type) => {\r\n        toast.dismiss();\r\n        if (type == 'success') {\r\n            toast.success(toastData)\r\n        }\r\n        if (type == 'error') {\r\n            toast.error(toastData)\r\n        }\r\n    };\r\n\r\n\r\n    ///////////{*** PAYMENT METHOD ***}/////////\r\n    const dreturn = (data) => {   // In (DATA) this function returns the Paymen Status, Message and Other Response data form Razorpay Server\r\n        console.log('Payment Status =>', data)\r\n        if (data?.status == true) {\r\n            navigate(`/paymentScreen/${data.data.razorpay_payment_id}/${props?.applicationDetails?.workflow_id}`)\r\n            notify(\"Payment Successfull\", \"success\")\r\n        } else {\r\n            toast.error('Payment failed....')\r\n            notify(\"Payment Failed\", \"error\")\r\n            navigate('/advertDashboard')\r\n        }\r\n    }\r\n\r\n    const payNow = (e) => {\r\n        console.log(\"payment id on click pay\", e.target.id)\r\n        let applicationId = e.target.id\r\n        const requestBody = {\r\n            id: applicationId\r\n        }\r\n        axios.post(`${api_getHoardingOrderIdForPayment}`, requestBody, ApiHeaderAdvrt())\r\n            .then(function (response) {\r\n                console.log('generate order id', response.data)\r\n                if (response.data.status == true) {\r\n                    console.log(\"OrderId Generated True\", response.data)\r\n                    RazorpayPaymentScreen(response.data.data, dreturn)  //Send Response Data as Object (amount, orderId, ulbId, departmentId, applicationId, workflowId, userId, name, email, contact) will call razorpay payment function to show payment popup     \r\n                }\r\n                else {\r\n\r\n                }\r\n                setorderId(response)\r\n            })\r\n            .catch(function (error) {\r\n                alert(\"Backend Server error. Unable to Generate Order Id\");\r\n                // console.log(\"ERROR :-  Unable to Generate Order Id \", err)\r\n\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"\">\r\n\r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onAfterOpen={afterOpenModal}\r\n                onRequestClose={closeModal}\r\n                style={customStyles}\r\n                contentLabel=\"Example Modal\"\r\n            >\r\n                <div className=\"bg-violet-200 text-slate-50 drop-shadow-2xl border border-violet-500 p-5 m-5 rounded-md\"  >\r\n                    <div className=''>\r\n                        <div className='shadow-md shadow-violet-300 py-1 pl-3 bg-white border-gray-400 text-gray-600 flex'>Make Payment For<span className=\"font-bold text-md ml-4 uppercase \">{props?.applicationDetails?.type} </span></div>\r\n\r\n                        <div className=\"md:flex block w-full h-56\">\r\n                            <div className='grid grid-cols-12 px-8 pt-3 leading-8 '>\r\n                                <div className='md:col-span-6 col-span-12'>\r\n                                    <div className='grid grid-cols-12'>\r\n                                        <div className='col-span-6  text-gray-600'>\r\n                                            <p>Application No. -</p>\r\n                                            <p>Applied date -</p>\r\n\r\n                                        </div>\r\n                                        <div className='col-span-6 text-gray-500 font-bold'>\r\n                                            <p>{props?.applicationDetails?.application_no} </p>\r\n                                            <p>{props?.applicationDetails?.application_date}</p>\r\n                                            {/* <p>{props?.OrderResponse?.applicationType}</p>\r\n                                            <p>&emsp;{props?.OrderResponse?.licenceForYears} year <small>(s)</small></p>\r\n                                            <p>{props?.OrderResponse?.applyDate == null ? JSON.stringify(new Date()).slice(1, 11) : props?.OrderResponse?.applyDate}</p> */}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='md:col-span-6 col-span-12'>\r\n                                    <div className='grid grid-cols-12'>\r\n                                        <div className='col-span-6  text-gray-600'>\r\n                                            <p>Approve Date -</p>\r\n                                            {/* <p>Entity Name -</p> */}\r\n                                        </div>\r\n                                        <div className='col-span-6 text-gray-500 font-bold'>\r\n                                            <p>{props?.applicationDetails?.approve_date}  </p>\r\n                                            {/* <p>{props?.applicationDetails?.entity_name} </p> */}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='md:col-span-6 col-span-12'>\r\n                                    <div className='grid grid-cols-12'>\r\n                                        <div className='col-span-6  text-gray-600'>\r\n                                            <h1 className=\"font-bold text-lg \">Payable Amount</h1>\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className='md:col-span-6 col-span-12'>\r\n                                    <div className='grid grid-cols-12'>\r\n                                        <div className='col-span-6  text-gray-600'>\r\n                                            <h1 className=\"font-bold text-lg bg-violet-300 px-2 \">{props?.applicationDetails?.payment_amount}</h1>\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className='md:col-span-6 col-span-12'>\r\n                                    <div className='grid grid-cols-12'>\r\n                                        <div className='col-span-6  text-gray-600'>\r\n                                            <button onClick={closeModal} className='mx-2 bg-red-600 hover:bg-red-700 transition duration-200 hover:scale-105 font-normal text-white px-6 py-1 text-sm  rounded-sm shadow-xl'>Cancel</button>\r\n                                            <button onClick={payNow} id={props?.applicationDetails?.id} className='mx-2 bg-indigo-600 hover:bg-indigo-700 transition duration-200 hover:scale-105 font-normal text-white px-6 py-1 text-sm  rounded-sm shadow-xl'>Pay Now</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='md:col-span-6 col-span-12'>\r\n                                    <div className='grid grid-cols-12'>\r\n                                        <div className='col-span-6  text-gray-600'>\r\n                                            <img src='https://cdn-icons-png.flaticon.com/256/7057/7057515.png' className=\"h-16\" />\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=''>\r\n                                <div className=\"\">\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\n// ReactDOM.render(<App />, appElement);\r\n\r\nexport default HoardingPaymentModal;\r\n","// //////////////////////////////////////////////////////////////////////////////////////\r\n// //    Author - Talib Hussain\r\n// //    Version - 1.0\r\n// //    Date - 14 july 2022\r\n// //    Revision - 1\r\n// //    Project - JUIDCO\r\n// //    Component  - PropertySafInbox (closed)\r\n// //    DESCRIPTION - PropertySafInbox Component\r\n// //////////////////////////////////////////////////////////////////////////////////////\r\nimport { useEffect, useState } from \"react\";\r\n// import { useQuery } from \"react-query\";\r\n// import axios from \"axios\";\r\n// import { format } from \"date-fns\";\r\nimport Modal from 'react-modal';\r\nimport HoardingApplicationFullDetail from \"./HoardingApplicationFullDetail\";\r\n// import Loader from \"../../Loader\";\r\n// import AgencyNotification from \"../AgencyNotification\";\r\nimport axios from \"axios\";\r\nimport BackToAgency from \"../../BackToAgency\";\r\nimport HoardingPaymentModal from \"./HoardingPaymentModal\";\r\nimport AdvertisementApiList from \"../../../AdvertisementApiList\";\r\nimport ApiHeaderAdvrt from \"../../../ApiHeaderAdvrt\";\r\nimport ListTableAdvert from \"../../../ListTableAdvert\";\r\nimport BrandLoader from \"../../../../../Components/Common/BrandLoader\";\r\nimport CommonModal from \"../../../../../Components/GlobalData/CommonModal\";\r\nimport ServerErrorCard from \"../../../ServerErrorCard\";\r\n// import ErrorPage from \"../../../ErrorPage\";\r\n\r\n\r\nfunction ViewAllHoardingUnpaidList() {\r\n    const [applicationType, setapplicationType] = useState()\r\n    const [applicationNo, setapplicationNo] = useState()\r\n    const { api_getHoardingUnpaidApplicationList, api_getHoardingApplicationDetailForPayment } = AdvertisementApiList()\r\n    const [applicationDetail, setapplicationDetail] = useState([])\r\n    const [applicationIdDetail, setapplicationIdDetail] = useState()\r\n    const [show, setshow] = useState(false)\r\n    const [modalIsOpen, setIsOpen] = useState(false);\r\n    const [isLoading, setisLoading] = useState(false);\r\n    const [erroState, seterroState] = useState(false);\r\n\r\n    const openModal = () => setIsOpen(true)\r\n    const closeModal = () => setIsOpen(false)\r\n    const afterOpenModal = () => { }\r\n    const [openPaymentModal, setOpenPaymentModal] = useState(0)\r\n    const [tableStatus, settableStatus] = useState(false);\r\n\r\n    const COLUMNS = [\r\n        {\r\n            Header: \"#\",\r\n            // accessor: 'ward_no'\r\n            Cell: ({ row }) => <div className=\"pr-2\">{row.index + 1}</div>,\r\n        },\r\n        {\r\n            Header: \"Application No\",\r\n            accessor: \"application_no\",\r\n        },\r\n        {\r\n            Header: \"Apply Date.\",\r\n            accessor: \"application_date\",\r\n        },\r\n        {\r\n            Header: \"Payment Amount\",\r\n            accessor: \"payment_amount\",\r\n        },\r\n        // {\r\n        //     Header: \"Firm Name\",\r\n        //     accessor: \"bank_name\",\r\n        // },\r\n        {\r\n            Header: \"Action\",\r\n            accessor: \"id\",\r\n            Cell: ({ cell }) => (\r\n                <>\r\n                    <button\r\n                        onClick={() => modalAction(cell.row.values.id, \"Approve\")}\r\n                        className=\"bg-indigo-500 px-3 py-1 rounded leading-5 shadow-lg hover:shadow-xl hover:bg-indigo-700\r\n                    hover:text-white text-white\"\r\n                    >\r\n                        View\r\n                    </button>\r\n\r\n                    <button\r\n                        onClick={() => handlePayment(cell.row.values.id)}\r\n                        className=\"bg-indigo-500 ml-4 px-3 py-1 rounded leading-5 shadow-lg hover:shadow-xl hover:bg-indigo-700\r\n                 hover:text-white text-white\"\r\n                    >\r\n                        Pay\r\n                    </button>\r\n\r\n                </>\r\n            ),\r\n        },\r\n\r\n    ];\r\n    const modalAction = (applicationId, applicationType) => {\r\n        console.log(\"..............application id..............\", applicationId)\r\n        console.log(\"..............application type..............\", applicationType)\r\n        setapplicationNo(applicationId)\r\n        setapplicationType(applicationType)\r\n        openModal()\r\n    }\r\n    const handlePayment = (appId) => {\r\n        let applicationId = appId\r\n        const requestBody = {\r\n            applicationId: applicationId\r\n        }\r\n        axios.post(`${api_getHoardingApplicationDetailForPayment}`, requestBody, ApiHeaderAdvrt())\r\n            .then(function (response) {\r\n                console.log('application detail for payment 1', response)\r\n                setapplicationIdDetail(response.data.data)\r\n                setOpenPaymentModal(prev => prev + 1)\r\n            })\r\n            .catch(function (error) {\r\n                console.log('errorrr.... ', error);\r\n            })\r\n    }\r\n\r\n    const getApplicationList = () => {\r\n        seterroState(false)\r\n        setisLoading(true)\r\n        axios.post(api_getHoardingUnpaidApplicationList, {}, ApiHeaderAdvrt())\r\n            .then((res) => {\r\n                console.log(\"res\", res.data);\r\n                if (res.data.status) {\r\n                    setapplicationDetail(res.data.data);\r\n                    settableStatus(true);\r\n                    setisLoading(false)\r\n\r\n                } else {\r\n\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                seterroState(true)\r\n                setisLoading(false)\r\n            })\r\n    }\r\n    const showLoader = (val) => {\r\n        setshow(val);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getApplicationList()\r\n    }, [])\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <>\r\n                <BrandLoader />\r\n            </>\r\n        )\r\n    }\r\n    if (erroState) {\r\n        return (\r\n            <CommonModal>\r\n                <ServerErrorCard title=\"Server is busy\" desc=\"Server is too busy to respond. Please try again later.\" buttonText=\"View Dashboard\" buttonUrl=\"/propertyDashboard\" />\r\n            </CommonModal>\r\n        )\r\n    }\r\n\r\n    console.log(\"unpaid application full list\", applicationDetail?.data)\r\n\r\n    return (\r\n        <>\r\n            <div className='container bg-white text-gray-600 h-screen mx-auto mt-16'>\r\n\r\n                <div>\r\n                    <HoardingPaymentModal openPaymentModal={openPaymentModal} applicationDetails={applicationIdDetail} />\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-12 lg:grid-cols-12 gap-4 container mx-auto pt-4 \">\r\n                        <div className=\"col-span-12 p-2\">\r\n                            <div className=\"flex flex-row bg-white mb-4 rounded leading-5 shadow-md shadow-violet-100 \">\r\n                                <img src=\"https://cdn-icons-png.flaticon.com/512/3288/3288006.png\" className=\"h-10 ml-3 mt-2\" />\r\n                                <h1 className=\"text-xl text-gray-700 font-semibold p-4\">HOARDING UNPAID APPLICATIONS</h1>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1 p-2\">\r\n                        {/* {tableStatus && tableStatus?.length != null && */}\r\n                        {tableStatus &&\r\n                            <ListTableAdvert\r\n                                assessmentType={false}\r\n                                columns={COLUMNS}\r\n                                dataList={applicationDetail?.data}\r\n                            />\r\n                        }\r\n                        {/* {tableStatus && tableStatus?.length == null &&\r\n                            <div className=\"text-xl font-semibold text-red-400 text-center\">No Data</div>\r\n                        } */}\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-1\">\r\n                        <Modal\r\n                            isOpen={modalIsOpen}\r\n                            onAfterOpen={afterOpenModal}\r\n                            onRequestClose={closeModal}\r\n                            // style={customStyles}\r\n                            contentLabel=\"Example Modal\"\r\n                        >\r\n                            <div class=\" rounded-lg shadow-xl border-2 border-gray-50 mx-auto px-0 \" style={{ 'width': '80vw', 'height': '100%' }}>\r\n                                <div className='h-[44rem] bg-white overflow-y-auto'>\r\n                                    <HoardingApplicationFullDetail data={applicationNo} applicationType={applicationType} showLoader={showLoader} closeModal={closeModal} />\r\n                                </div>\r\n                            </div>\r\n                        </Modal>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ViewAllHoardingUnpaidList\r\n","import React from 'react'\r\n\r\nfunction GlobalFilterSearch({ filter, setFilter }) {\r\n  return (\r\n    <div className=\"px-1\">\r\n    Search : {' '}\r\n    <input className='border border-gray-300 px-2  bg-gray-50 shadow-lg rounded leading-5 py-1.5 ' type=\"text\" value={filter || ''} onChange={e => setFilter(e.target.value)} />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default GlobalFilterSearch","\r\nimport React, { useMemo, useState, useEffect } from 'react'\r\nimport { useTable, useSortBy, useGlobalFilter, usePagination } from 'react-table'\r\nimport { AiOutlineArrowDown } from 'react-icons/ai'\r\nimport { CSVLink } from \"react-csv\";\r\nimport { format } from 'date-fns'\r\n// import axios from 'axios'\r\nimport { AiOutlineDoubleRight, AiOutlineDoubleLeft } from 'react-icons/ai'\r\nimport GlobalFilterSearch from './GlobalFilterSearch';\r\n\r\n\r\nfunction ListTableAdvert(props) {\r\n\r\n    const [bounce, setbounce] = useState('hidden')\r\n    const columns = useMemo(() => props.columns, [])\r\n    const data = useMemo(() => props.dataList, [props.dataList])\r\n    // console.log('lll ',data.length)\r\n    useEffect(() => {\r\n        setPageSize(5)\r\n    }, [])\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        // rows,//since used pagination\r\n        page,\r\n        nextPage,\r\n        previousPage,\r\n        canNextPage,\r\n        canPreviousPage,\r\n        prepareRow,\r\n        pageOptions,\r\n        gotoPage,\r\n        pageCount,\r\n        setPageSize,\r\n        state,\r\n        setGlobalFilter\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState: { pageIndex: 0 }\r\n    }, useGlobalFilter, useSortBy, usePagination)\r\n\r\n    const { globalFilter, pageIndex, pageSize } = state\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"flex mb-2 pb-2\">\r\n                <div className='flex-initial'><GlobalFilterSearch filter={globalFilter} setFilter={setGlobalFilter} /></div>\r\n                <div className='flex-initial ml-2'><button className='bg-sky-400 px-3 pr-3  shadow-lg rounded py-1 text-white hover:shadow-2xl hover:bg-green-600 text-center relative' onMouseEnter={() => setbounce('')} onMouseLeave={() => setbounce('hidden')}><CSVLink data={props.dataList}>Export</CSVLink><div className={bounce + ' absolute h-full top-3 text-sm left-0 text-center animate-bounce'}><AiOutlineArrowDown /></div></button></div>\r\n                <div className='flex-1'>{props.children}</div>\r\n\r\n            </div>\r\n            <div className=\"overflow-x-auto bg-white\">\r\n                <div className=\"inline-block min-w-full rounded-lg overflow-hidden bg-white\">\r\n                    <table {...getTableBodyProps} className=\"min-w-full leading-normal\">\r\n                        <thead className='font-bold text-left text-sm bg-violet-100 hover:bg-violet-100'>\r\n                            {\r\n                                headerGroups?.map((headerGroup) => (\r\n                                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                                        {\r\n                                            headerGroup.headers.map((column) => (\r\n                                                <th {...column.getHeaderProps(column.getSortByToggleProps())} className=\"px-2 py-3 border-b border-gray-200 text-gray-800  text-left text-xs uppercase text-left\">{column.render('Header')}\r\n                                                    <span>{column.isSorted ? (column.isSortedDesc ? '⬆️' : '⬇️') : ''}</span></th>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n\r\n                        </thead>\r\n                        <tbody {...getTableBodyProps()} className=\"text-sm\">\r\n                            {/* {rows.map((row) => { */} {/**since used pagination */}\r\n                            {page?.map((row) => {\r\n                                prepareRow(row)\r\n                                return (\r\n                                    <tr {...row.getRowProps()} className=\"bg-white shadow-md border border-slate-100 hover:bg-slate-50 \">\r\n                                        {row?.cells?.map((cell) => {\r\n                                            return <td {...cell.getCellProps()} className=\"px-2 py-2 text-sm text-left\">{cell.render('Cell')}</td>\r\n                                        })}\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                            <tr>\r\n                                <td></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div className='mt-3 grid grid-cols-12'>\r\n                        <div className='col-span-2 ml-2'>  <select className=\"h-10 bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 \" value={pageSize} onChange={(e) => setPageSize(Number(e.target.value))}>\r\n                            {[5, 10, 25, 50].map((pageSize) => (\r\n                                <option key={pageSize} value={pageSize}>\r\n                                    show {pageSize}\r\n                                </option>\r\n                            ))}\r\n\r\n                        </select></div>\r\n                        <div className='col-span-4 text-center col-start-5'>   <span >\r\n                            page {''}\r\n                            <strong>\r\n                                {pageIndex + 1} of {pageOptions.length}\r\n                            </strong>{''}\r\n                        </span></div>\r\n\r\n                        <div className='col-span-4 text-right'><button className='cursor-pointer hover:bg-sky-300 p-2 hover:text-white' onClick={() => gotoPage(0)} disabled={!canPreviousPage}><AiOutlineDoubleLeft /> </button>\r\n                            <button className={(!canPreviousPage ? 'opacity-50' : 'opacity-100') + ' text-xl hover:bg-sky-300 hover:text-white'} onClick={() => previousPage()} disabled={!canPreviousPage}>⬅️</button>\r\n                            <button className={(!canNextPage ? 'opacity-50' : 'opacity-100') + ' text-xl hover:bg-sky-300 hover:text-white'} onClick={() => nextPage()} disabled={!canNextPage}>➡️</button>\r\n                            <button className='cursor-pointer hover:bg-sky-300 p-2 hover:text-white' onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>  <AiOutlineDoubleRight /></button></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListTableAdvert\r\n"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","background","border","props","React","modalIsOpen","setIsOpen","api_getHoardingOrderIdForPayment","AdvertisementApiList","useState","setorderId","navigate","useNavigate","closeModal","useEffect","openPaymentModal","console","log","applicationDetails","notify","toastData","type","toast","dreturn","data","status","razorpay_payment_id","workflow_id","className","isOpen","onAfterOpen","onRequestClose","style","contentLabel","application_no","application_date","approve_date","payment_amount","onClick","e","target","id","requestBody","axios","ApiHeaderAdvrt","then","response","RazorpayPaymentScreen","catch","error","alert","src","applicationType","setapplicationType","applicationNo","setapplicationNo","api_getHoardingUnpaidApplicationList","api_getHoardingApplicationDetailForPayment","applicationDetail","setapplicationDetail","applicationIdDetail","setapplicationIdDetail","setshow","isLoading","setisLoading","erroState","seterroState","setOpenPaymentModal","tableStatus","settableStatus","COLUMNS","Header","Cell","row","index","accessor","cell","modalAction","values","handlePayment","applicationId","appId","prev","res","err","BrandLoader","CommonModal","ServerErrorCard","title","desc","buttonText","buttonUrl","ListTableAdvert","assessmentType","columns","dataList","class","HoardingApplicationFullDetail","showLoader","val","filter","setFilter","value","onChange","bounce","setbounce","useMemo","setPageSize","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableBodyProps","getTableProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","prepareRow","pageOptions","gotoPage","pageCount","state","setGlobalFilter","globalFilter","pageSize","onMouseEnter","onMouseLeave","CSVLink","children","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","getCellProps","Number","length","disabled"],"sourceRoot":""}