{"version":3,"file":"static/js/7363.3df58a53.chunk.js","mappings":"uTA0HA,UA3GA,WAGI,IAEIA,EAFJ,GAA8BC,EAAAA,EAAAA,MAAtBC,EAAS,EAATA,UAAWC,EAAM,EAANA,OACnBC,QAAQC,IAAI,sBAAuBH,GAG/BF,EADU,OAAVG,EACQ,cAEA,mBAEZG,EAAAA,EAAAA,GAAYN,GAEZ,IAAMO,GAAeC,EAAAA,EAAAA,UACrB,GAAsCC,EAAAA,EAAAA,YAAU,eAAzCC,EAAW,KAAEC,EAAc,KAClC,GAAwBF,EAAAA,EAAAA,WAAS,GAAM,eACvC,GADW,KAAS,MACcA,EAAAA,EAAAA,WAAS,IAAM,eAA1CG,EAAS,KAAEC,EAAY,KAC9B,GAAkCJ,EAAAA,EAAAA,WAAS,GAAM,eAA1CK,EAAS,KAAEC,EAAY,KAK9B,GAAyDC,EAAAA,EAAAA,KAAjDC,EAAkB,EAAlBA,mBAAoBC,EAAwB,EAAxBA,0BAE5BC,EAAAA,EAAAA,YAAU,WACNC,GACJ,GAAG,IAEH,IAAMA,EAAmB,WACrBP,GAAa,GACbE,GAAa,GAEb,IAQIM,EACAC,EATAC,EAAQC,OAAOC,aAAaC,QAAQ,SAIlB,UAAD,OAAYH,GAMnB,WAAVpB,GACAkB,EAAMH,EACNI,EAAc,CAEVK,OAAQzB,KAGZmB,EAAMJ,EACNK,EAAc,CACVK,OAAQzB,IAGhBE,QAAQC,IAAI,mCAAoCiB,GAChDM,EAAAA,GAAAA,KAAWP,EAAKC,GAAaO,EAAAA,EAAAA,MACxBC,MAAK,SAACC,GAEH3B,QAAQC,IAAI,+BAAgC0B,GACxCA,EAASC,KAAKC,OAEdtB,EAAeoB,EAASC,KAAKA,MAG7BnB,GAAa,GAEjBE,GAAa,EACjB,IACCmB,OAAM,SAACC,GACJtB,GAAa,GACbE,GAAa,GACbX,QAAQC,IAAI8B,EAChB,GACR,EAMA,OAAIrB,GAEI,iCACI,SAAC,IAAW,KACZ,gBAAKsB,UAAU,oBAIvBxB,GAEI,SAAC,IAAW,WACR,SAAC,IAAe,CAACZ,MAAM,iBAAiBqC,KAAK,yDAAyDC,WAAW,iBAAiBC,UAAU,0BAMpJ,4BAEI,SAAC,IAAY,CACTC,QAAS,kBAAM,qBAAiB,EAChCC,QAAS,kBAAMlC,EAAamC,OAAO,KAEvC,SAAC,UAAgB,CAACvC,OAAQA,EAAQwC,IAAKpC,EAAcG,YAAaA,MAG9E,C","sources":["Pages/Contents/CitizenSafForm/PaymentReceipt2/SafPaymentReceiptIndex.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport ReactToPrint from 'react-to-print-advanced';\r\nimport ApiHeader from '../../../../Components/ApiList/ApiHeader';\r\nimport CitizenApplyApiList from '../../../../Components/CitizenApplyApiList';\r\nimport BarLoader from '../../../../Components/Common/BarLoader';\r\nimport BrandLoader from '../../../../Components/Common/BrandLoader';\r\nimport CommonModal from '../../../../Components/GlobalData/CommonModal';\r\nimport useSetTitle from '../../../../Components/GlobalData/UseSetTitle';\r\nimport ServerErrorCard from '../../../AdvertisementModule/ServerErrorCard';\r\nimport NonBlockingLoader from '../NonBlockingLoader';\r\nimport ComponentToPrint from './SafPaymentReceipt';\r\n\r\n\r\nfunction SafPaymentReceiptIndex() {\r\n\r\n    ///////{***âœ… payment Id from use param...***}///////\r\n    const { paymentId, module } = useParams()\r\n    console.log(\"param payment id ..\", paymentId)\r\n    let title\r\n    if (module == 'saf') {\r\n        title = \"SAF Receipt\"\r\n    } else {\r\n        title = \"Holding Receipt\"\r\n    }\r\n    useSetTitle(title)\r\n\r\n    const componentRef = useRef();\r\n    const [paymentData, setpaymentData] = useState();\r\n    const [show, setshow] = useState(false)\r\n    const [erroState, seterroState] = useState(false);\r\n    const [isLoading, setisLoading] = useState(false);\r\n    // const [paymentId, setpaymentId] = useState('pay_KiI7acuJomb5eq');\r\n\r\n    // const { licenseId, tranId } = useParams();\r\n\r\n    const { api_getPaymentData, api_getHoldingReceiptUrl } = CitizenApplyApiList()\r\n\r\n    useEffect(() => {\r\n        fetchPaymentData();\r\n    }, [])\r\n\r\n    const fetchPaymentData = () => {\r\n        seterroState(false)\r\n        setisLoading(true)\r\n\r\n        let token = window.localStorage.getItem('token')\r\n        const header = {\r\n            headers:\r\n            {\r\n                Authorization: `Bearer ${token}`,\r\n                Accept: 'application/json',\r\n            }\r\n        }\r\n        let url\r\n        let requestBody\r\n        if (module == 'holding') {\r\n            url = api_getHoldingReceiptUrl\r\n            requestBody = {\r\n                // HERE paymentId is transaction no\r\n                tranNo: paymentId\r\n            }\r\n        } else {\r\n            url = api_getPaymentData\r\n            requestBody = {\r\n                tranNo: paymentId\r\n            }\r\n        }\r\n        console.log('before fetch payment receipt....', requestBody)\r\n        axios.post(url, requestBody, ApiHeader())\r\n            .then((response) => {\r\n                // console.log(\"payment data\", response.data.data);\r\n                console.log(\"payment data at receipt.....\", response);\r\n                if (response.data.status) {\r\n\r\n                    setpaymentData(response.data.data);\r\n\r\n                } else {\r\n                    seterroState(true)\r\n                }\r\n                setisLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                seterroState(true)\r\n                setisLoading(false)\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const showLoader = (val) => {\r\n        setshow(val);\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <>\r\n                <BrandLoader />\r\n                <div className='min-h-screen'></div>\r\n            </>\r\n        )\r\n    }\r\n    if (erroState) {\r\n        return (\r\n            <CommonModal>\r\n                <ServerErrorCard title=\"Server is busy\" desc=\"Server is too busy to respond. Please try again later.\" buttonText=\"View Dashboard\" buttonUrl=\"/propertyDashboard\" />\r\n            </CommonModal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <ReactToPrint\r\n                trigger={() => <button></button>}\r\n                content={() => componentRef.current}\r\n            />\r\n            <ComponentToPrint module={module} ref={componentRef} paymentData={paymentData} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SafPaymentReceiptIndex"],"names":["title","useParams","paymentId","module","console","log","useSetTitle","componentRef","useRef","useState","paymentData","setpaymentData","erroState","seterroState","isLoading","setisLoading","CitizenApplyApiList","api_getPaymentData","api_getHoldingReceiptUrl","useEffect","fetchPaymentData","url","requestBody","token","window","localStorage","getItem","tranNo","axios","ApiHeader","then","response","data","status","catch","error","className","desc","buttonText","buttonUrl","trigger","content","current","ref"],"sourceRoot":""}